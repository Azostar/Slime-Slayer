#BlueJ class context
comment0.target=Room
comment0.text=\r\n\ Class\ Room\ -\ a\ room\ in\ an\ adventure\ game.\r\n\r\n\ This\ class\ is\ part\ of\ the\ "World\ of\ Zuul"\ application.\ \r\n\ "World\ of\ Zuul"\ is\ a\ very\ simple,\ text\ based\ adventure\ game.\ \ \r\n\r\n\ A\ "Room"\ represents\ one\ location\ in\ the\ scenery\ of\ the\ game.\ \ It\ is\ \r\n\ connected\ to\ other\ rooms\ via\ exits.\ \ For\ each\ existing\ exit,\ the\ room\ \r\n\ stores\ a\ reference\ to\ the\ neighboring\ room.\r\n\ \r\n\ @author\ \ Michael\ K\u00F6lling\ and\ David\ J.\ Barnes\r\n\ @version\ 2011.08.08\r\n
comment1.params=description\ enemies\ stat
comment1.target=Room(java.lang.String,\ boolean,\ Stats)
comment1.text=\r\n\ Create\ a\ room\ described\ "description".\ Initially,\ it\ has\r\n\ no\ exits.\ "description"\ is\ something\ like\ "a\ kitchen"\ or\r\n\ "an\ open\ court\ yard".\r\n\ @param\ description\ The\ room's\ description.\r\n
comment10.params=name\ damage\ property
comment10.target=void\ addWeapon(java.lang.String,\ int,\ java.lang.String)
comment10.text=\r\n\ Adds\ a\ weapon\ to\ the\ rooms\ weapons\r\n
comment11.params=name
comment11.target=java.util.HashMap\ pickUp(java.lang.String)
comment11.text=\r\n\ Return\ the\ relevant\ hashmap\ for\ the\ room\ items.\r\n
comment12.params=
comment12.target=boolean\ hasItems()
comment13.params=
comment13.target=boolean\ hasWeapons()
comment14.params=
comment14.target=java.lang.String\ spawnEnemies()
comment14.text=\r\n\ Spawn\ enemies\ in\ the\ room\ every\ time\ you\ enter.\ Checks\ if\ the\ room\ has\ enemies\ enabled,\r\n\ if\ it\ does,\ add\ enemies.\ addEnemies\ returns\ true\ if\ enemies\ already\ exist,\ and\ false\ if\ they\r\n\ do\ not.\ This\ is\ used\ to\ determine\ the\ output.\r\n
comment15.params=
comment15.target=Enemies\ getEnemies()
comment15.text=\r\n\ Return\ the\ enemies\ object\r\n
comment16.params=
comment16.target=boolean\ hasEnemies()
comment16.text=\r\n\ Returns\ if\ the\ room\ has\ enemies\ as\ a\ boolean\r\n
comment17.params=
comment17.target=void\ startRoom()
comment17.text=\r\n\ Sets\ room\ as\ a\ start\ room\r\n
comment18.params=
comment18.target=void\ endRoom()
comment18.text=\r\n\ Sets\ room\ as\ an\ end\ room\r\n
comment19.params=
comment19.target=boolean\ isStartRoom()
comment19.text=\r\n\ Returns\ if\ the\ room\ is\ a\ start\ room\r\n
comment2.params=direction\ neighbor
comment2.target=void\ setExit(java.lang.String,\ Room)
comment2.text=\r\n\ Define\ an\ exit\ from\ this\ room.\r\n\ @param\ direction\ The\ direction\ of\ the\ exit.\r\n\ @param\ neighbor\ \ The\ room\ to\ which\ the\ exit\ leads.\r\n
comment20.params=
comment20.target=boolean\ isEndRoom()
comment20.text=\r\n\ Returns\ if\ the\ room\ is\ an\ end\ room\r\n
comment21.params=
comment21.target=void\ giveChest()
comment21.text=\r\n\ Give\ the\ room\ a\ chest\r\n
comment22.params=
comment22.target=boolean\ hasChest()
comment22.text=\r\n\ Return\ if\ the\ room\ has\ a\ chest\r\n
comment23.params=
comment23.target=void\ openChest()
comment23.text=\r\n\ When\ this\ method\ is\ called\ add\ the\ launch_codes\ item\ to\ the\ item\ list,\ set\ the\ chest\ state\r\n\ to\ false\ and\ print\ a\ string\ for\ the\ user.\r\n
comment3.params=
comment3.target=java.lang.String\ getShortDescription()
comment3.text=\r\n\ @return\ The\ short\ description\ of\ the\ room\r\n\ (the\ one\ that\ was\ defined\ in\ the\ constructor).\r\n
comment4.params=
comment4.target=java.lang.String\ getLongDescription()
comment4.text=\r\n\ Return\ a\ description\ of\ the\ room\ in\ the\ form\:\r\n\ \ \ \ \ You\ are\ in\ the\ kitchen.\r\n\ \ \ \ \ Exits\:\ north\ west\r\n\ @return\ A\ long\ description\ of\ this\ room\r\n
comment5.params=evaded
comment5.target=java.lang.String\ takeAction(boolean)
comment5.text=\r\n\ Returns\ an\ empty\ string\ because\ we\ want\ this\ to\ take\ place\ before\ spawning\ enemies,\ \r\n\ but\ after\ the\ description\ of\ the\ area.\r\n\ Checks\ if\ there\ are\ any\ present\ enemies\ in\ the\ room.\ Takes\ a\ boolean\ called\ evaded\ which\r\n\ determines\ if\ the\ attack\ should\ happen\ or\ not,\ based\ on\ the\ players\ condition,\ or\ hard\ set\r\n\ when\ the\ function\ is\ called.\r\n
comment6.params=
comment6.target=java.lang.String\ newRoom()
comment6.text=\r\n\ Check\ if\ this\ is\ a\ new\ room.\ Return\ if\ the\ state\ as\ a\ readable\ string.\r\n
comment7.params=
comment7.target=java.lang.String\ getExitString()
comment7.text=\r\n\ Return\ a\ string\ describing\ the\ room's\ exits,\ for\ example\r\n\ "Exits\:\ north\ west".\r\n\ @return\ Details\ of\ the\ room's\ exits.\r\n
comment8.params=direction
comment8.target=Room\ getExit(java.lang.String)
comment8.text=\r\n\ Return\ the\ room\ that\ is\ reached\ if\ we\ go\ from\ this\ room\ in\ direction\r\n\ "direction".\ If\ there\ is\ no\ room\ in\ that\ direction,\ return\ null.\r\n\ @param\ direction\ The\ exit's\ direction.\r\n\ @return\ The\ room\ in\ the\ given\ direction.\r\n
comment9.params=name\ number
comment9.target=void\ addItem(java.lang.String,\ int)
comment9.text=\r\n\ Adds\ an\ items\ to\ the\ rooms\ items\r\n
numComments=24
